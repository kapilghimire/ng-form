Branches:
  Master
  NgModel
  FormValidation
  FormValidationCss
  FormValidationOnSubmit
  FormInputValidationOnBlur

For template driven forms we need

import {FormsModule} from '@angular/forms'

Registirng Forms FormsModule to NgModule

import { FormsModule } from '@angular/forms';
@NgModule({
  declarations: [
    ..........
  ],
  imports: [
    BrowserModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

Changes made by angular on html form element
<form novalidate="" class="ng-untouched ng-pristine ng-valid">
<input type="text"><button>OK</button>
</form>

installing external library in angular
npm install --save <library-name>

using ngFrom to print form status
<form #form="ngFrom">
.......
</form>
{{ form | json }}

ngModel and ngForm directive are part of

FormsModule from "@angular/forms"

print value of input text inside form with template reference variable

<form #form="ngForm">
<div class="form-group">
      <label for="name">Name</label>
      <input id="name" name="name" class="form-control" ngModel/>
    </div>
 ----- other form elemens
</div>
{{ forms.value | json}}

NOTE: use of directive ngModel

directive use to connect ngForm template variable to inputs values
ngModel

ngForm directive propertiy to get value on input binded witn ngModel directive
{{form.value | json}}
<form #form="ngForm">
  <input id="name" name="name" class="form-control" ngModel/>


Two way data binding
<input id="name" name="name" class="form-control" [(ngModel)] = "userSettings.name"/>

Output toway databind object property to html
{{userSettings | json}}


ToDo :
 Create form submittion with using form template variable, one way binding , no [(ngModel)]

 Create form submittion with toway data binding with [(ngModel)]


only one difference between one way binding and two way binding
extra baanana in box syntax for [(ngModel)]

html for one way binding and two way bindinging in form
<input id="name" name="name" class="form-control" [(ngModel)] = "userSettings.name"/>
<input id="name" name="name" class="form-control" ngModel/>

important html propery for one way and two way form binding
name propertiy of html

making copy of original data to restore if user presses cancel or restore
originalUserSetting: UserSettings={
  'name':'Miltion'
}
userSettings:UserSettings={
  ...this.originalUserSetting
}

spread operator only provides
copying of flat object

deep clone of object
use loaddash library

Directive on from element to allow native html5 set ON in angular
<form #form="ngForm" ngNativeValidate>
---
</form>

touched classes for forms/input  in angular
ng-untouched
ng-touched

ng-untouched class added when to input
intially when forms input gets rendered

ng-touched class added when to input
input changed,tabed,submittion(directy) basically when blur happens

Dirty classes for form/input in angular
ng-pristine
ng-dirty

ng-pristine class
 original value is not changed

ng-dirty class
 original vlaue is changed

validation classes
 ng-valid
 ng-invalid

 ng-dirty class won't get removed
 even if you undo your change

Printing out css classes applied by angular on input
<div class="form-group">
      <label for="name">Name</label>
      <input id="name" name="name" class="form-control" [(ngModel)] = "userSettings.name" #classTest required/>
    </div>
    <h2>{{classTest.className}}</h2>



ngModel object propertiy for touched input
touched
untouched

ngModel object propertiy when values of input change
pristine - no change
dirty

ngModel object propery for validation
valid
invalid

printing ngModel properties for validatioon
<div class="form-group">
      <label for="name">Name</label>
      <input id="name" name="name" class="form-control"
       [(ngModel)] = "userSettings.name" #classTest required
       #propertyTest="ngModel"/>
    </div>
    <h2>{{classTest.className}}</h2>
    <h3>dirty : {{propertyTest.dirty}}</h3>
    <h3>pristine : {{propertyTest.pristine}}</h3>
    <h3>touched : {{propertyTest.touched}}</h3>
    <h3>untouched : {{propertyTest.untouched}}</h3>
    <h3>valid : {{propertyTest.valid}}</h3>
    <h3>invalid : {{propertyTest.invalid}}</h3>


Showing validation error message of inputs using ngModel properties
<div class="form-group">
      <label for="name">Name</label>
      <input id="name" name="name" class="form-control" [(ngModel)] = "userSettings.name" #classTest required
       #nameField="ngModel"/>
       <div [hidden]="nameField.valid || nameField.untouched" class="alert alert-danger">
           Enter a name
       </div>
    </div>

Css for highlighting input border for validation
.ng-invalid:not(form).ng-touched{
  border: 1px solid red;
}


form html to show error on when form submitted
 <form #form="ngForm" (ngSubmit)="onSubmit(form)">

    <div class="form-group">
      <label for="name">Name</label>
      <input id="name" name="name" class="form-control" [(ngModel)] = "userSettings.name" #classTest
       #nameField="ngModel" required
       [class.field-error]="form.submitted && nameField.invalid"/>
       <div [hidden]="!form.submitted || nameField.valid" class="alert alert-danger">
           Enter a name
       </div>
    </div>


css for form to show error on when form submitted
.field-error{
  border: 1px solid red;
}


form submitted hadaling in component field
  onSubmit(form:NgForm){
    console.log(`in onSubmit:`, form.valid);
    /* any complex logic can be wirtten here */
  }

Blur event html angular
 <div class="form-group">
      <label for="name">Name</label>
      <input id="name" name="name" class="form-control" [(ngModel)] = "userSettings.name"
       (blur)="onBlur(nameField)"
       #classTest
       #nameField="ngModel" required
       [class.field-error]="form.submitted && nameField.invalid"/>
       <div [hidden]="!form.submitted || nameField.valid" class="alert alert-danger">
           Enter a name
       </div>
    </div>

Blur event on typescript
  onBlur(field:NgModel){
    /* any type of complex validation can be done here */
    console.log(`in onBlur`,field.valid)
  }
